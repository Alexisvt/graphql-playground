interface Node {
  id: ID!
}

interface ITodo {
  id: ID!
  name: String
  isComplete: Boolean
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input TodoInput { 
  name: String
  isComplete: Boolean
}

type Todo implements ITodo, Node {
  id: ID!
  name: String
  isComplete: Boolean
}

type TodoEdge {
  cursor: String!
  node: Todo
}

type TodoConnection {
  edges: [TodoEdge]
  pageInfo: PageInfo!
}

type Store {
  todos(todoIdList: [String]): [Todo]
  todoConnection(first: Int, after: String, last: Int, before: String): TodoConnection
}

type Mutation {
  createTodo(input: TodoInput!): Todo
  updateTodo(taskId: ID!, input: TodoInput!): Todo
  toggleTodo(taskId: ID!, isComplete: Boolean!): Todo
  deleteTodo(taskId: ID!): Boolean!
}

type Query {
  store: Store
}